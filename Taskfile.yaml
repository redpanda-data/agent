version: '3'

tasks:
  sync:
    desc: "Sync all extras and packages for the dev group"
    cmds:
      - uv sync --all-extras --all-packages --group dev

  format:
    aliases: [fmt]
    desc: "Run ruff format and check with fix"
    cmds:
      - uv run ruff format
      - uv run ruff check --fix

  lint:
    desc: "Run ruff check"
    cmds:
      - uv run ruff check

  pyright:
    desc: "Run pyright"
    cmds:
      - uv run pyright

  tests:
    aliases: [test]
    desc: "Run pytest"
    cmds:
      - uv run pytest

  coverage:
    desc: "Run coverage tests and reports"
    cmds:
      - uv run coverage run -m pytest
      - uv run coverage xml -o coverage.xml
      - uv run coverage report -m --fail-under=95

  snapshots-fix:
    desc: "Run pytest with inline-snapshot fix"
    cmds:
      - uv run pytest --inline-snapshot=fix

  snapshots-create:
    desc: "Run pytest with inline-snapshot create"
    cmds:
      - uv run pytest --inline-snapshot=create

  old-version-tests:
    desc: "Run tests with Python 3.9"
    env:
      UV_PROJECT_ENVIRONMENT: ".venv_39"
    cmds:
      - uv run --python 3.9 -m pytest
      - uv run --python 3.9 -m pyright .

  build-docs:
    desc: "Build documentation with mkdocs"
    cmds:
      - uv run mkdocs build

  serve-docs:
    desc: "Serve documentation with mkdocs"
    cmds:
      - uv run mkdocs serve --dev-addr 0.0.0.0:8000

  deploy-docs:
    desc: "Deploy documentation to GitHub Pages with mkdocs"
    cmds:
      - uv run mkdocs gh-deploy --force --verbose

  protogen:
    desc: "Generate protobuf"
    vars:
      OUT_DIR: src
    cmds:
      - >
        uv run -m grpc_tools.protoc \
          --python_out={{.OUT_DIR}} \
          --mypy_out={{.OUT_DIR}} \
          --grpc_python_out={{.OUT_DIR}} \
          --mypy_grpc_out={{.OUT_DIR}} \
          -I proto \
          proto/redpanda/runtime/v1alpha1/*.proto
